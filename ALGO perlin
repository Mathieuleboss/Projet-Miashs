import math
import random
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Définir les constantes
PERLIN_SIZE = 1024
PERLIN_SCALE = 16
PERSISTENCE = 0.5
LACUNARITY = 2.0
NUM_OCTAVES = 16

OCEAN_WEIGHT = 8
FOREST_WEIGHT = 0.2
DESERT_WEIGHT = 0.2
MOUNTAIN_WEIGHT = 0.4

# Définir la colormap
colors = [
    (0.0, 'deepskyblue'),
    (0.333, 'forestgreen'),
    (0.667, 'orange'),
    (1.0, 'lightgray')
]
reduced_cmap = LinearSegmentedColormap.from_list('reduced', colors)

# Initialiser la table de bruit Perlin
perlin = [[0 for _ in range(PERLIN_SIZE)] for _ in range(PERLIN_SIZE)]

# Fonction pour interpoler linéairement entre deux valeurs
def lerp(a0, a1, w):
    return a0 + w * (a1 - a0)

# Fonction de fade pour le bruit Perlin
def fade(t):
    return t ** 3 * (t * (t * 6 - 15) + 10)

# Fonction pour générer le bruit Perlin
def generate_perlin_noise():
    for i in range(PERLIN_SIZE):
        for j in range(PERLIN_SIZE):
            perlin[i][j] = random.random()

# Fonction pour générer une octave de bruit Perlin
def generate_noise(width, height, scale):
    values = [[0 for _ in range(width)] for _ in range(height)]

    for x in range(width):
        for y in range(height):
            value = perlin_noise((x + seed) / scale, (y + seed) / scale)
            values[x][y] = value

    return values

# Fonction pour générer une carte de hauteur en utilisant plusieurs octaves de bruit Perlin
def generate_height_map(width, height, scale):
    values = [[0 for _ in range(width)] for _ in range(height)]

    # Générer les cartes de bruit pour chaque biome
    ocean_map = generate_noise(width, height, scale * 4)
    forest_map = generate_noise(width, height, scale * 1.5)
    desert_map = generate_noise(width, height, scale * 1.2)
    mountain_map = generate_noise(width, height, scale)

    # Combiner les cartes de bruit en utilisant une moyenne pondérée
    for x in range(width):
        for y in range(height):
            ocean_value = ocean_map[x][y] * OCEAN_WEIGHT
            forest_value = forest_map[x][y] * FOREST_WEIGHT
            desert_value = desert_map[x][y] * DESERT_WEIGHT
            mountain_value = mountain_map[x][y] * MOUNTAIN_WEIGHT
            values[x][y] = (ocean_value + forest_value + desert_value + mountain_value) / (OCEAN_WEIGHT + FOREST_WEIGHT + DESERT_WEIGHT + MOUNTAIN_WEIGHT)

    # Appliquer la colormap
    for x in range(width):
        for y in range(height):
            value = values[x][y]
            if value < 0.25:
                # Océan
                values[x][y] = 0
            elif value < 0.5:
                # Désert
                values[x][y] = 0.33
            elif value < 0.75:
                # Forêt
                values[x][y] = 0.66
            else:
                # Montagne
                values[x][y] = 1

    return values
# Fonction pour calculer le bruit Perlin
def perlin_noise(x, y, octave=0):
    x0 = math.floor(x)
    x1 = x0 + 1
    y0 = math.floor(y)
    y1 = y0 + 1
    sx = x - x0
    sy = y - y0

    n00 = perlin[x0 & (PERLIN_SIZE - 1)][y0 & (PERLIN_SIZE - 1)]
    n01 = perlin[x0 & (PERLIN_SIZE - 1)][y1 & (PERLIN_SIZE - 1)]
    n10 = perlin[x1 & (PERLIN_SIZE - 1)][y0 & (PERLIN_SIZE - 1)]
    n11 = perlin[x1 & (PERLIN_SIZE - 1)][y1 & (PERLIN_SIZE - 1)]

    u = fade(sx)
    v = fade(sy)
    n0 = lerp(n00, n01, v)
    n1 = lerp(n10, n11, v)
    n = lerp(n0, n1, u)

    # Récursion pour les octaves supérieures
    if octave > 0:
        n += perlin_noise(x * LACUNARITY, y * LACUNARITY, octave - 1) * PERSISTENCE

    return n
# Fonction pour afficher la carte des hauteurs
def display_height_map(map):
    fig, ax = plt.subplots()
    im = ax.imshow(map, cmap=reduced_cmap, vmin=0, vmax=1)  # Utiliser vmin=0 et vmax=1
    fig.colorbar(im, ax=ax)
    plt.show()
# Fonction principale 
def main():
    # Seed the random number generator
    seed = int(time.time())
    random.seed(seed)

    # Généré la table du bruit de Perlin 
    generate_perlin_noise()

    # Générer une carte de hauteur avec plusieurs octaves de bruit Perlin
    width = 1250
    height = 1250
    scale = 25
    map = generate_height_map(width, height, scale)

    # afficher la carte des hauteurs
    display_height_map(map)

if __name__ == '__main__':
    main()

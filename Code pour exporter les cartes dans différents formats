exemple de code qui permet d'exporter les cartes générées dans différents formats à l'aide de la bibliothèque Pillow. Les utilisateurs pourront également exporter les données de la carte sous forme de fichier CSV ou JSON pour une utilisation dans d'autres applications.

Tout d'abord, nous allons créer une fonction pour enregistrer la carte sous forme d'image à l'aide de la bibliothèque Pillow:


from PIL import Image
import numpy as np

def save_image(height_map, river_map, lake_map, forest_map, filename):
    # Convertir les cartes en images
    height_image = Image.fromarray((height_map * 255).astype(np.uint8), mode='L')
    river_image = Image.fromarray((river_map * 255).astype(np.uint8), mode='L')
    lake_image = Image.fromarray((lake_map * 255).astype(np.uint8), mode='L')
    forest_image = Image.fromarray((forest_map * 255).astype(np.uint8), mode='L')

    # Combiner les images en une seule image RGB
    combined_image = Image.new('RGB', (height_map.shape[1], height_map.shape[0]))
    combined_image.putalpha(255)
    combined_image.paste(height_image, mask=height_image)
    combined_image.paste(river_image, mask=river_image)
    combined_image.paste(lake_image, mask=lake_image)
    combined_image.paste(forest_image, mask=forest_image)

    # Enregistrer l'image
    combined_image.save(filename)
La fonction save_image() prend en entrée les cartes de hauteur, de rivières, de lacs et de forêts générées, ainsi que le nom du fichier de sortie, et enregistre la carte sous forme d'image au format spécifié (PNG, JPEG ou SVG). La fonction convertit les cartes en images à l'aide de la méthode fromarray() de Pillow, puis combine les images en une seule image RGB à l'aide de la méthode paste(). Enfin, la fonction enregistre l'image à l'aide de la méthode save().

Ensuite, nous allons créer une fonction pour exporter les données de la carte sous forme de fichier CSV ou JSON:


import csv
import json

def export_data(height_map, river_map, lake_map, forest_map, filename, format):
    if format == 'csv':
        # Exporter les données au format CSV
        with open(filename, 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            for y in range(height_map.shape[0]):
                row = []
                for x in range(height_map.shape[1]):
                    row.append(height_map[y, x])
                    row.append(river_map[y, x])
                    row.append(lake_map[y, x])
                    row.append(forest_map[y, x])
                writer.writerow(row)
    elif format == 'json':
        # Exporter les données au format JSON
        data = []
        for y in range(height_map.shape[0]):
            row = []
            for x in range(height_map.shape[1]):
                cell = {
                    'height': height_map[y, x],
                    'river': river_map[y, x],
                    'lake': lake_map[y, x],
                    'forest': forest_map[y, x]
                }
                row.append(cell)
            data.append(row)
        with open(filename, 'w') as jsonfile:
            json.dump(data, jsonfile)
La fonction export_data() prend en entrée les cartes de hauteur, de rivières, de lacs et de forêts générées, ainsi que le nom du fichier de sortie et le format de sortie (CSV ou JSON), et exporte les données de la carte sous forme de fichier CSV ou JSON. Si le format de sortie est CSV, la fonction écrit les données dans un fichier CSV à l'aide de la bibliothèque csv. Si le format de sortie est JSON, la fonction écrit les données dans un fichier JSON à l'aide de la bibliothèque json.

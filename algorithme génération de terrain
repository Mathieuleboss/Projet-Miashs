import numpy as np
import matplotlib.pyplot as plt

# Fonction pour générer du bruit de Perlin
def perlin_noise(x, y, scale, octaves, persistence, lacunarity):
    total = 0
    frequency = 1
    amplitude = 1
    max_value = 0
    for _ in range(octaves):
        i = int(x * frequency)
        j = int(y * frequency)
        value = np.random.rand(i + 1, j + 1)
        tl = value[i, j]
        tr = value[i + 1, j]
        bl = value[i, j + 1]
        br = value[i + 1, j + 1]
        sx = x * frequency - i
        sy = y * frequency - j
        t = (1 - np.cos(2 * np.pi * sx)) * 0.5
        u = (1 - np.cos(2 * np.pi * sy)) * 0.5
        value = tl * (1 - t) * (1 - u) + tr * t * (1 - u) + bl * (1 - t) * u + br * t * u
        total += value * amplitude
        max_value += amplitude
        frequency *= lacunarity
        amplitude *= persistence
    return total / max_value * scale

# Fonction pour générer une carte de hauteur
def generate_height_map(size, scale, octaves, persistence, lacunarity):
    height_map = np.zeros((size, size))
    for x in range(size):
        for y in range(size):
            height_map[x, y] = perlin_noise(x / size, y / size, scale, octaves, persistence, lacunarity)
    return height_map

# Fonction pour générer une carte de biome
def generate_biome_map(height_map, temperature_map):
    biome_map = np.zeros_like(height_map)
    for x in range(height_map.shape[0]):
        for y in range(height_map.shape[1]):
            height = height_map[x, y]
            temperature = temperature_map[x, y]
            if height < 0.2:
                biome_map[x, y] = 0  # Océan
            elif temperature < 0.3:
                biome_map[x, y] = 1  # Toundra
            elif temperature < 0.5:
                biome_map[x, y] = 2  # Forêt
            elif temperature < 0.7:
                biome_map[x, y] = 3  # Prairie
            else:
                biome_map[x, y] = 4  # Désert
    return biome_map

# Générer une carte de hauteur
size = 256
scale = 10
octaves = 6
persistence = 0.5
lacunarity = 2
height_map = generate_height_map(size, scale, octaves, persistence, lacunarity)

# Générer une carte de température
temperature_map = np.zeros_like(height_map)
for x in range(height_map.shape[0]):
    for y in range(height_map.shape[1]):
        distance = np.sqrt((x - height_map.shape[0] / 2) ** 2 + (y - height_map.shape[1] / 2) ** 2) / height_map.shape[0]
        temperature_map[x, y] = np.interp(distance, [0, 0.5, 1], [1, 0.5, -1])

# Générer une carte de biome
biome_map = generate_biome_map(height_map, temperature_map)

# Afficher les cartes générées
fig, axs = plt.subplots(1, 3, figsize=(15, 5))
axs[0].imshow(height_map, cmap='gray')
axs[0].set_title('Carte de hauteur')
axs[1].imshow(temperature_map, cmap='coolwarm')
axs[1].set_title('Carte de température')
axs[2].imshow(biome_map, cmap='terrain')
axs[2].set_title('Carte de biome')
plt.show()

Voici un exemple de code qui permet le stockage et le chargement de cartes générées dans une base de données SQLite à l'aide de la bibliothèque sqlite3 en Python.

Tout d'abord, nous allons créer une fonction pour initialiser la base de données et créer une table pour stocker les cartes générées:


import sqlite3

def init_database():
    conn = sqlite3.connect('maps.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS maps
                 (id INTEGER PRIMARY KEY,
                  name TEXT NOT NULL,
                  height_map BLOB NOT NULL,
                  river_map BLOB NOT NULL,
                  lake_map BLOB NOT NULL,
                  forest_map BLOB NOT NULL)''')
    conn.commit()
    conn.close()
La fonction init_database() crée une connexion à la base de données SQLite maps.db et crée une table maps avec les colonnes suivantes:

id: un identifiant unique pour chaque carte générée.
name: le nom de la carte générée.
height_map: la carte de hauteur générée au format binaire BLOB.
river_map: la carte des rivières générée au format binaire BLOB.
lake_map: la carte des lacs générée au format binaire BLOB.
forest_map: la carte des forêts générée au format binaire BLOB.
Ensuite, nous allons créer une fonction pour enregistrer une carte générée dans la base de données:


def save_map(name, height_map, river_map, lake_map, forest_map):
    conn = sqlite3.connect('maps.db')
    c = conn.cursor()
    c.execute('''INSERT INTO maps (name, height_map, river_map, lake_map, forest_map)
                 VALUES (?, ?, ?, ?, ?)''',
              (name, sqlite3.Binary(height_map.tobytes()),
               sqlite3.Binary(river_map.tobytes()),
               sqlite3.Binary(lake_map.tobytes()),
               sqlite3.Binary(forest_map.tobytes())))
    conn.commit()
    conn.close()
La fonction save_map() prend en entrée le nom de la carte générée, ainsi que les cartes de hauteur, de rivières, de lacs et de forêts générées, et les insère dans la table maps de la base de données SQLite. Les cartes sont converties au format binaire BLOB à l'aide de la méthode tobytes() de NumPy et de la fonction sqlite3.Binary().

Enfin, nous allons créer une fonction pour charger une carte générée à partir de la base de données:


def load_map(name):
    conn = sqlite3.connect('maps.db')
    c = conn.cursor()
    c.execute('''SELECT height_map, river_map, lake_map, forest_map
                 FROM maps WHERE name=?''', (name,))
    result = c.fetchone()
    if result is None:
        return None
    height_map = np.frombuffer(result[0], dtype=np.float32).reshape((256, 256))
    river_map = np.frombuffer(result[1], dtype=np.uint8).reshape((256, 256))
    lake_map = np.frombuffer(result[2], dtype=np.uint8).reshape((256, 256))
    forest_map = np.frombuffer(result[3], dtype=np.uint8).reshape((256, 256))
    conn.close()
    return height_map, river_map, lake_map, forest_map
La fonction load_map() prend en entrée le nom de la carte générée à charger, et renvoie les cartes de hauteur, de rivières, de lacs et de forêts correspondantes sous forme de tableaux NumPy. La fonction effectue une requête SQL pour sélectionner les cartes correspondant au nom donné, puis convertit les données binaires BLOB en tableaux NumPy à l'aide de la méthode frombuffer() de NumPy.

Vous pouvez appeler ces fonctions après avoir généré une carte pour l'enregistrer dans la base de données, ou pour charger une carte existante à partir de la base de données. Par exemple:


# Générer une carte
height_map = generate_height_map(256,

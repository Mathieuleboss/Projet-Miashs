import numpy as np

def generate_river_map(height_map):
    river_map = np.zeros_like(height_map)
    for x in range(1, height_map.shape[0] - 1):
        for y in range(1, height_map.shape[1] - 1):
            if np.random.rand() < 0.001:  # Probabilité de source de rivière
                river_map[x, y] = 1
                follow_downhill(height_map, river_map, x, y)
    return river_map

def follow_downhill(height_map, river_map, x, y):
    directions = [(0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1)]
    lowest_height = height_map[x, y]
    lowest_direction = None
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if 0 <= nx < height_map.shape[0] and 0 <= ny < height_map.shape[1]:
            if height_map[nx, ny] < lowest_height and river_map[nx, ny] == 0:
                lowest_height = height_map[nx, ny]
                lowest_direction = (dx, dy)
    if lowest_direction:
        river_map[x + lowest_direction[0], y + lowest_direction[1]] = 1
        follow_downhill(height_map, river_map, x + lowest_direction[0], y + lowest_direction[1])
